You are required to implement a Python FastAPI server that compute super high precision decimal point.

Environment Variables:
- apiKey: hard-coded string use to verify if request is coming from authorized source.
- maxDecimalPoints: maximum decimal point.
- redisUrl: redis url with credentials

Taks:
- when system startup, start calculating Pi to increasing accuracy e.g. 3, 3.1, 3.14, 3.141, 3.1415... up to the maxDecimalPoints defined in environment variable
- for each calculation done, save the value to Redis(replace the old value with the next higher precision value). 
  Also use another key to save the number of precision(decimal places) of the current cached value(need to store in string because we might go up to 10mils decimal places)
- Provide an API endpoint(GET /api/pi) to fetch the current cached value and its number of decimal places
- Add auth guard to intercept HTTP header x-api-key, compare it with the apiKey from env variable, throw 401 Unauthorized if not match.
- Add rate limit
- Handle all exceptions properly
- Add unit test for the pi calculation part, test the result up to 1000 decimal places.
- Add e2e test on the GET /api/pi endpoint,  
   - success case should return 200 OK with body { "pi": "{the cached pi value}", "dp": "{the cached precision}"}
- Dockerize the fastapi server (optimize the build, ensure minimal final image size)
- Create a docker compose that include spinning up Redis and the fastapi server
- Create a README file


Restrictions:
- Implement using Chudnovsky, no third-party libraries are allowed for the calculation of Pi precision
- Must obey to clean code, clean architecture, SOLID and DRY design principles


Non-functional requirement:
- performance to calculate the Pi is crucial
- accuracy of the pi is crucial
- response time of GET /api/api is crucial

